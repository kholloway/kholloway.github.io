<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rhel | Systems and Automation]]></title>
  <link href="http://blog.fretzel.net/blog/categories/rhel/atom.xml" rel="self"/>
  <link href="http://blog.fretzel.net/"/>
  <updated>2014-10-09T22:08:05-05:00</updated>
  <id>http://blog.fretzel.net/</id>
  <author>
    <name><![CDATA[Kent Holloway]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resize Qcow2 Images Without Virt-resize]]></title>
    <link href="http://blog.fretzel.net/blog/2014/10/08/resize-qcow2-images-without-virt-resize/"/>
    <updated>2014-10-08T20:52:54-05:00</updated>
    <id>http://blog.fretzel.net/blog/2014/10/08/resize-qcow2-images-without-virt-resize</id>
    <content type="html"><![CDATA[<p>I&rsquo;m in the process of switching from kickstart builds for new VM&rsquo;s to image based clones.
I needed to find a simple way to add space to a qcow2 image file along with one of the partitions in it and the volumes it contained.
Most of the guides I found used <em>virt-resize</em> to resize the image.
While <em>virt-resize</em> makes resizing qcow2 images really easy it has the side affect of making sparse images into non-spare images.
This can end up using a considerable amount of space depending on how much additional space you are adding.
The rest of the options I found have you converting qcow2 to raw and then back again which is slow and also can consume large amounts of space.</p>

<p><a href="http://libguestfs.org/guestfs.3.html">Libguestfs</a> to the rescue!</p>

<p>Now there are a few requirements, namely this only works if the partition you want to modify is either the last partition or the only partition and you need to do this all while the VM is shutdown.
In my case it&rsquo;s the last partition I need to expand, the disk layout has boot at partition 1 and partition 2 contains two LVM volumes.
It&rsquo;s both of these volumes that I want to expand via libguestfs.</p>

<p><a href="https://gist.github.com/kholloway/ded725ea321ce8fe79c7">full gist available here</a> with some error checking and a few more options.</p>

<h4>Lets go!</h4>

<p>First lets increase the qcow2 image size using the standard <em>qemu-img</em> tool, lets add 40GB.</p>

<pre><code class="bash">qemu-img resize vmimage.img +40G
</code></pre>

<p>Now using whatever language you like (libguestfs has lots of bindings for various languages) fire up the guestfs back end.
Note that you can do this in the shell/Bash if you like but calculating the proper partition sector start location is a little harder (not impossible just a bit more work).
Everything below is in Python, copy it to a script or just type along in the Python command line.</p>

<pre><code class="python">import guestfs

# For return values we want a dict object
g = guestfs.GuestFS(python_return_dict=True)
g.add_drive_opts('vmimage.img')
g.launch()
</code></pre>

<p>Lets assume your dev name is <strong>/dev/sda</strong> but you can use the <em>list_devices</em> function to find it if you are not sure.
Now lets get the partition list:</p>

<pre><code class="python">partitions = g.part_list('/dev/sda')
</code></pre>

<p>We need the start location of partition 2:</p>

<pre><code class="python">part_start = partitions[1]['part_start']
</code></pre>

<p>Grab the block size of the image:</p>

<pre><code class="python">blk_size = g.blockdev_getss('/dev/sda')
</code></pre>

<p>Calculate the starting sector by dividing our partition start location by the block size:</p>

<pre><code class="python">start_sector = part_start / blk_size
</code></pre>

<p>Now the scary part, we need to delete partition 2:</p>

<pre><code class="python">g.part_del('/dev/sda', 2)
</code></pre>

<p>Ok great the partition is gone, lets create a new one now with the info we gathered above.
The &lsquo;-1&rsquo; bit below tells libguestfs that you want the last sector as your end sector.
This is a nice shortcut so you don&rsquo;t need to calculate it yourself:</p>

<pre><code class="python">try:
  g.part_add('/dev/sda', 'p', start_sector, -1)
except RuntimeError as msg:
  print "Part add failed due to re-read of partition table, this is normal and expected.. Ignored.."
</code></pre>

<p>As noted above because the partition table can&rsquo;t be re-read by the kernel you will get an error message.
This is ok, to resolve this lets just stop and restart the libguestfs system to force it to reload the partition table:</p>

<pre><code class="python">g.shutdown()
g.add_drive_opts('vmimage.img')
g.launch()
</code></pre>

<p>Ok now we can resize the PV inside the partition we just expanded:</p>

<pre><code class="python">g.pvresize('/dev/sda2')
</code></pre>

<p>Now in this case I know the exact volume names but if you didn&rsquo;t know it you can use the <em>lvs</em> function in libguestfs to list them.
Since I know them already I&rsquo;m just going to include it in the command below which takes my swap volume from whatever it was (2GB previously) to 6GB now.</p>

<pre><code class="python">g.lvresize('/dev/vgroot/swap.vol', 6144)
</code></pre>

<p>Ok great, swap vol is now 6GB!
Lets expand the root volume with any remaining space in the PV.
This uses a slightly different guestfs command that fills free space with a percentage number.
For my particular use case I just want to fill all remaining space or 100% remaining space as shown below:</p>

<pre><code class="python">g.lvresize_free('/dev/vgroot/root.fs', 100)
</code></pre>

<p>Last steps, lets resize the actual filesystem on the root volume and then check it to make sure everything is OK:</p>

<pre><code class="python">g.resize2fs('/dev/vgroot/root.fs')
g.e2fsck('/dev/vgroot/root.fs', correct=True)
</code></pre>

<p>Now shutdown the guestfs process since we are all done:</p>

<pre><code class="python">g.shutdown()
g.close()
</code></pre>

<p>That&rsquo;s it!
Looks hard but it&rsquo;s pretty simple, the hardest part is calulating your proper start sector.
Now go boot up your VM and you will find that swap has increased to 6GB and your root volume has an additional 34GB of space in it!</p>

<p>This all happens in less than a minute if you script/automate it all and doesn&rsquo;t have any of the conversion or sparse to non-sparse issues that virt-resize has.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitorious/Redis Installer Updated]]></title>
    <link href="http://blog.fretzel.net/blog/2013/03/26/gitorious-slash-redis-installer-updated/"/>
    <updated>2013-03-26T16:40:00-05:00</updated>
    <id>http://blog.fretzel.net/blog/2013/03/26/gitorious-slash-redis-installer-updated</id>
    <content type="html"><![CDATA[<p>In regards to my last post <a href="/blog/2013/03/25/gitorious-and-the-redis-service/">gitorious-and-redis-service</a> I have updated my clone of the ce-installer to include the changes up to v2.4.12 and rolled all my changes from that post into the latest version.</p>

<p>My CE-Installer clone:
 <a href="https://www.gitorious.org/~kholloway/gitorious/kholloways-ce-installer">https://www.gitorious.org/~kholloway/gitorious/kholloways-ce-installer</a></p>

<p>I have requested a merge with the mainline ce-installer which is viewable at:
 <a href="https://www.gitorious.org/gitorious/ce-installer/merge_requests/2">https://www.gitorious.org/gitorious/ce-installer/merge_requests/2</a></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitorious and the Redis Service]]></title>
    <link href="http://blog.fretzel.net/blog/2013/03/25/gitorious-and-the-redis-service/"/>
    <updated>2013-03-25T15:03:09-05:00</updated>
    <id>http://blog.fretzel.net/blog/2013/03/25/gitorious-and-the-redis-service</id>
    <content type="html"><![CDATA[<p>Gitorious has a very nice status command via /usr/bin/gitorious_status that quickly shows you if all your Gitorious services are up and running (see screenshot).</p>

<p><img class="left" src="/images/health_check.png" width="300" height="250"></p>

<p>It&rsquo;s missing one very important service though, Redis!</p>

<p>Redis is now the default messaging service when you do a fresh install via the <a href="http://getgitorious.com/installer">Gitorious CE-Installer</a> but it&rsquo;s not included in the status check, it&rsquo;s missing from the /admin/diagnostics page and it&rsquo;s missing a <a href="http://mmonit.com/monit/">Monit</a> check file to restart it if it dies. Keeping it running is pretty important for a working Gitorious install because without it many of the web page operations like creating a new project or team will fail and it won&rsquo;t be very clear from the logs why it failed.</p>

<p>Lets fix some of those problems.</p>

<p>First off lets patch the gitorious_status script with the patch below which should work on any modern Linux variant.</p>

<p>Save the lines below as: <strong>/tmp/my.patch</strong></p>

<pre><code>*** gitorious_status 2013-03-25 16:11:04.475121039 -0500
--- gitorious_status_redis 2013-03-25 16:16:35.380135982 -0500
*************** unicorn_status() {
*** 26,31 ****
--- 26,35 ----
      check_process_and_report "ps -p $PID" "Unicorn"
  }

+ redis_status() {
+     check_process_and_report "/etc/init.d/redis status" "Redis"
+ }
+
  # Upstart's exit codes are a beast of its own
  resque_status() {
      check_process_and_report "/sbin/initctl status resque-worker" "Resque"
*************** sphinx_status
*** 80,82 ****
--- 84,87 ----
  memcached_status
  sshd_status
  mysqld_status
+ redis_status
</code></pre>

<p>Apply your patch to the status command:</p>

<pre><code> patch /usr/bin/gitorious_status &lt; /tmp/my.patch
</code></pre>

<p>Your status command should now show the details of the Redis service as shown below.</p>

<p><img class="left" src="/images/redis-status.png" width="300" height="250"></p>

<p>Next lets create a Monit config file for Redis which will watch the process and restart if needed.
I use Puppet and a custom Monit module I wrote for this but it&rsquo;s not required.
For now lets just manually create the file and you can integrate it into your configuration management tool later if you like. Note that the Monit file below is specific to Redhat, change the pidfile and start/stop lines as needed to match your OS.</p>

<p>Copy the contents below into:
   <strong>/etc/monit.d/redis.monit</strong></p>

<pre><code>check process redis-server with pidfile /var/run/redis/redis.pid
  start program = "/sbin/service redis start"
  stop program = "/sbin/service redis stop"
  if does not exist for 1 cycles then restart
  if 5 restarts within 5 cycles then alert
</code></pre>

<p>Now lets restart Monit so it picks up the change.
On Redhat that&rsquo;s done like so:</p>

<pre><code>service monit restart
</code></pre>

<p>Check that it&rsquo;s setup correctly in Monit:</p>

<pre><code>monit summary
</code></pre>

<p>OR</p>

<pre><code>monit status
</code></pre>

<p>So now you have Redis monitored by Monit and the gitorious_status command shows you if it&rsquo;s up or down but your /admin/diagnostics page is still missing any status about it. That last bit is not too hard to fix but for now I&rsquo;m leaving that up to the Gitorious folks to patch along with the incorrect status about the gitorious-poller service which is not in use any longer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git CE Installer for RHEL 6.X]]></title>
    <link href="http://blog.fretzel.net/blog/2013/03/04/git-ce-installer-for-rhel-6-dot-x/"/>
    <updated>2013-03-04T07:36:51-06:00</updated>
    <id>http://blog.fretzel.net/blog/2013/03/04/git-ce-installer-for-rhel-6-dot-x</id>
    <content type="html"><![CDATA[<p>My small modifications to the main Gitorious CE installer so it installs cleanly on Redhat/RHEL 6.X instead of just on CentOS 6.X.
It also does not try to update Puppet when it&rsquo;s already installed.</p>

<p>I&rsquo;m maintaining a Git repo of my changes at Gitorious:
 <a href="https://gitorious.org/~kholloway/gitorious/kholloways-ce-installer">Custom Gitorious CE Installer for RHEL</a></p>
]]></content>
  </entry>
  
</feed>
